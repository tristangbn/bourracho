// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type {
  ConversationsApiApiRegisterUserData,
  ConversationsApiApiRegisterUserResponses,
  ConversationsApiApiRegisterUserErrors,
  ConversationsApiApiLoginData,
  ConversationsApiApiLoginResponses,
  ConversationsApiApiLoginErrors,
  ConversationsApiApiListConversationsData,
  ConversationsApiApiListConversationsResponses,
  ConversationsApiApiListConversationsErrors,
  ConversationsApiApiCreateConversationData,
  ConversationsApiApiCreateConversationResponses,
  ConversationsApiApiCreateConversationErrors,
  ConversationsApiApiJoinConversationData,
  ConversationsApiApiJoinConversationResponses,
  ConversationsApiApiJoinConversationErrors,
  ConversationsApiApiGetMessagesData,
  ConversationsApiApiGetMessagesResponses,
  ConversationsApiApiGetMessagesErrors,
  ConversationsApiApiPostMessageData,
  ConversationsApiApiPostMessageResponses,
  ConversationsApiApiPostMessageErrors,
  ConversationsApiApiGetConversationData,
  ConversationsApiApiGetConversationResponses,
  ConversationsApiApiGetConversationErrors,
  ConversationsApiApiPatchConversationData,
  ConversationsApiApiPatchConversationResponses,
  ConversationsApiApiPatchConversationErrors,
  ConversationsApiApiGetUsersData,
  ConversationsApiApiGetUsersResponses,
  ConversationsApiApiGetUsersErrors,
  ConversationsApiApiPatchMessageData,
  ConversationsApiApiPatchMessageResponses,
  ConversationsApiApiPatchMessageErrors,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Register User
 */
export const conversationsApiApiRegisterUser = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiRegisterUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiRegisterUserResponses,
    ConversationsApiApiRegisterUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/register/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Login
 */
export const conversationsApiApiLogin = <ThrowOnError extends boolean = true>(
  options: Options<ConversationsApiApiLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiLoginResponses,
    ConversationsApiApiLoginErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/login/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * List Conversations
 */
export const conversationsApiApiListConversations = <
  ThrowOnError extends boolean = true,
>(
  options?: Options<ConversationsApiApiListConversationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ConversationsApiApiListConversationsResponses,
    ConversationsApiApiListConversationsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/',
    ...options,
  })
}

/**
 * Create Conversation
 */
export const conversationsApiApiCreateConversation = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiCreateConversationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiCreateConversationResponses,
    ConversationsApiApiCreateConversationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Join Conversation
 */
export const conversationsApiApiJoinConversation = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiJoinConversationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiJoinConversationResponses,
    ConversationsApiApiJoinConversationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/{conversation_id}/join',
    ...options,
  })
}

/**
 * Get Messages
 */
export const conversationsApiApiGetMessages = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiGetMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ConversationsApiApiGetMessagesResponses,
    ConversationsApiApiGetMessagesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/{conversation_id}/messages/',
    ...options,
  })
}

/**
 * Post Message
 */
export const conversationsApiApiPostMessage = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiPostMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiPostMessageResponses,
    ConversationsApiApiPostMessageErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/{conversation_id}/messages/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Conversation
 */
export const conversationsApiApiGetConversation = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiGetConversationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ConversationsApiApiGetConversationResponses,
    ConversationsApiApiGetConversationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/{conversation_id}',
    ...options,
  })
}

/**
 * Patch Conversation
 */
export const conversationsApiApiPatchConversation = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiPatchConversationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ConversationsApiApiPatchConversationResponses,
    ConversationsApiApiPatchConversationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/{conversation_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Users
 */
export const conversationsApiApiGetUsers = <
  ThrowOnError extends boolean = true,
>(
  options?: Options<ConversationsApiApiGetUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ConversationsApiApiGetUsersResponses,
    ConversationsApiApiGetUsersErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/users',
    ...options,
  })
}

/**
 * Patch Message
 */
export const conversationsApiApiPatchMessage = <
  ThrowOnError extends boolean = true,
>(
  options: Options<ConversationsApiApiPatchMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ConversationsApiApiPatchMessageResponses,
    ConversationsApiApiPatchMessageErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/chat/{conversation_id}/messages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}
