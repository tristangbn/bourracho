// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type {
  ConversationsApiApiRegisterUserData,
  ConversationsApiApiRegisterUserResponses,
  ConversationsApiApiRegisterUserErrors,
  ConversationsApiApiCreateConversationData,
  ConversationsApiApiCreateConversationResponses,
  ConversationsApiApiCreateConversationErrors,
  ConversationsApiApiJoinConversationData,
  ConversationsApiApiJoinConversationResponses,
  ConversationsApiApiJoinConversationErrors,
  ConversationsApiApiPostMessageData,
  ConversationsApiApiPostMessageResponses,
  ConversationsApiApiPostMessageErrors,
  ConversationsApiApiPostMetadataData,
  ConversationsApiApiPostMetadataResponses,
  ConversationsApiApiPostMetadataErrors,
  ConversationsApiApiGetMessagesData,
  ConversationsApiApiGetMessagesResponses,
  ConversationsApiApiGetMessagesErrors,
  ConversationsApiApiGetMetadataData,
  ConversationsApiApiGetMetadataResponses,
  ConversationsApiApiGetMetadataErrors,
  ConversationsApiApiGetUsersData,
  ConversationsApiApiGetUsersResponses,
  ConversationsApiApiGetUsersErrors,
  ConversationsApiApiListConversationsData,
  ConversationsApiApiListConversationsResponses,
  ConversationsApiApiListConversationsErrors,
  ConversationsApiApiPostReactData,
  ConversationsApiApiPostReactResponses,
  ConversationsApiApiPostReactErrors,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Register User
 */
export const conversationsApiApiRegisterUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiRegisterUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiRegisterUserResponses,
    ConversationsApiApiRegisterUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/auth/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Create Conversation
 */
export const conversationsApiApiCreateConversation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiCreateConversationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiCreateConversationResponses,
    ConversationsApiApiCreateConversationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/conversations/{user_id}/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Join Conversation
 */
export const conversationsApiApiJoinConversation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiJoinConversationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiJoinConversationResponses,
    ConversationsApiApiJoinConversationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/conversations/{user_id}/join',
    ...options,
  })
}

/**
 * Post Message
 */
export const conversationsApiApiPostMessage = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiPostMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiPostMessageResponses,
    ConversationsApiApiPostMessageErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/messages/{user_id}/{conversation_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Post Metadata
 */
export const conversationsApiApiPostMetadata = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiPostMetadataData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiPostMetadataResponses,
    ConversationsApiApiPostMetadataErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/metadata/{user_id}/{conversation_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Messages
 */
export const conversationsApiApiGetMessages = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiGetMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ConversationsApiApiGetMessagesResponses,
    ConversationsApiApiGetMessagesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/messages/{user_id}/{conversation_id}/get',
    ...options,
  })
}

/**
 * Get Metadata
 */
export const conversationsApiApiGetMetadata = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiGetMetadataData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ConversationsApiApiGetMetadataResponses,
    ConversationsApiApiGetMetadataErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/metadata/{user_id}/{conversation_id}/get',
    ...options,
  })
}

/**
 * Get Users
 */
export const conversationsApiApiGetUsers = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiGetUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ConversationsApiApiGetUsersResponses,
    ConversationsApiApiGetUsersErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/users/{user_id}/{conversation_id}/get',
    ...options,
  })
}

/**
 * List Conversations
 */
export const conversationsApiApiListConversations = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiListConversationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ConversationsApiApiListConversationsResponses,
    ConversationsApiApiListConversationsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/conversations/{user_id}/get',
    ...options,
  })
}

/**
 * Post React
 */
export const conversationsApiApiPostReact = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConversationsApiApiPostReactData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConversationsApiApiPostReactResponses,
    ConversationsApiApiPostReactErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/react/{user_id}/{conversation_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}
